generator invertase_prisma {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions", "deno"]
  output          = "../invertase/prisma"
}

generator invertase_pothos {
  provider = "prisma-pothos-types"
  output   = "../invertase/pothos-types.d.ts"
}

generator nectar {
  provider = "go run github.com/steebchen/prisma-client-go"
  output   = "../nectar/db"
}

datasource db {
  provider = "postgresql" // Use your preferred database provider
  url      = env("DATABASE_URL")
}

/// Represents a user account with associated mailboxes and server configurations.
model Account {
  /// Unique identifier for the account.
  id String @id @default(cuid())

  /// The email address of the account.
  address String @unique

  /// The display name of the account holder.
  name String

  /// List of mailboxes associated with the account.
  inboxes Mailbox[] @relation("AccountInboxes")

  /// The primary inbox for the account.
  mainbox   Mailbox? @relation("AccountMainBox", fields: [mainboxId], references: [id])
  mainboxId String?

  /// The trash mailbox for the account.
  trashbox   Mailbox? @relation("AccountTrashBox", fields: [trashboxId], references: [id])
  trashboxId String?

  /// The sent mailbox for the account.
  sentbox   Mailbox? @relation("AccountSentBox", fields: [sentboxId], references: [id])
  sentboxId String?

  /// The drafts mailbox for the account.
  draftsbox   Mailbox? @relation("AccountDraftsBox", fields: [draftsboxId], references: [id])
  draftsboxId String?

  /// Server used for sending emails.
  senderServer   Server? @relation("SenderServer", fields: [senderServerId], references: [id])
  senderServerId String?

  /// Credentials used for sending emails.
  senderAuth   ServerAuth? @relation("SenderServerAuth", fields: [senderAuthId], references: [id])
  senderAuthId String?

  /// Server used for receiving emails.
  receiverServer   Server @relation("ReceiverServer", fields: [receiverServerId], references: [id])
  receiverServerId String

  /// Credentials used for receiving emails.
  receiverAuth   ServerAuth @relation("ReceiverServerAuth", fields: [receiverAuthId], references: [id])
  receiverAuthId String

  /// Signatures associated with the account.
  signatures Signature[]
}

/// Represents a mailbox, such as an inbox, trash, or sent folder.
model Mailbox {
  /// Unique identifier for the mailbox.
  id String @id @default(cuid())

  /// UIDVALIDITY of the mailbox. Only available to @miel/nectar
  internalUidValidity Int

  /// The account this mailbox belongs to.
  account   Account @relation("AccountInboxes", fields: [accountId], references: [id])
  accountId String

  /// The type of mailbox (e.g., Inbox, Trashbox, Sentbox).
  type MailboxType

  /// Optional name for the mailbox.
  name String

  /// Indicates whether this is the main mailbox.
  main Boolean?

  /// List of emails stored in this mailbox.
  emails Email[]

  /// Account that uses this mailbox as the main mailbox.
  mainbox     Account[] @relation("AccountMainBox")
  /// Account that uses this mailbox as the trash mailbox.
  trashbox    Account[] @relation("AccountTrashBox")
  /// Account that uses this mailbox as the sent mailbox.
  sentbox     Account[] @relation("AccountSentBox")
  /// Account that uses this mailbox as the drafts mailbox.
  draftsbox   Account[] @relation("AccountDraftsBox")

  /// Senders that get sent here by default
  defaultBoxOf Address[] @relation("DefaultInbox")

  @@unique([accountId, name, internalUidValidity])
}

/// Defines the types of mailboxes available.
enum MailboxType {
  /// The primary mailbox for incoming emails.
  INBOX

  /// The mailbox for deleted emails.
  TRASHBOX

  /// The mailbox for sent emails.
  SENTBOX

  /// The mailbox for drafts.
  DRAFTS

  /// A feed-style mailbox for newsletters.
  FEED
}

/// Represents an email message.
model Email {
  /// Unique identifier for the email.
  id String @id @default(cuid())

  /// UID of the email in the mailbox. Only available to @miel/nectar
  internalUid Int

  /// Message-ID of the email.
  messageId String? @unique

  /// Date and time the email was received.
  receivedAt DateTime

  /// The sender of the email.
  sender   Address @relation("EmailSender", fields: [senderId], references: [id])
  senderId String

  /// The primary recipient of the email.
  recipient   Address @relation("EmailRecipient", fields: [recipientId], references: [id])
  recipientId String

  /// List of carbon copy (CC) recipients.
  cc Address[] @relation("EmailCc")

  /// The subject of the email. May have been renamed by the user.
  subject String

  /// The subject of the email as it was received
  originalSubject String

  /// The text body content of the email.
  textBody String

  /// The HTML body content of the email.
  htmlBody String

  /// The raw, entire body of the email (all parts).
  rawBody String

  /// Attachments included in the email.
  attachments Attachment[]

  /// Clips extracted from the email.
  clips Clip[]

  /// List of headers in the email. Array of [key, value, key, value, ...]
  headers String[]

  /// Labels applied to the email.
  labels Label[]

  /// The mailbox that contains the email.
  inbox Mailbox @relation(fields: [inboxId], references: [id])

  inboxId String

  /// Indicates whether the email is trusted (not spam).
  trusted Boolean

  /// Emails contained in this email's thread.
  threadReferences Email[] @relation("ThreadEmails")

  /// Emaisl that reference this email as part of their thread.
  threadReplies Email[] @relation("ThreadEmails")

  @@unique([inboxId, internalUid])
}

model Attachment {
  /// Unique identifier for the attachment.
  id String @id @default(cuid())

  /// The filename of the attachment.
  filename String

  /// The MIME type of the attachment.
  mimeType String

  /// The size of the attachment in bytes.
  size Int

  /// Extracted text content of the attachment.
  textContent String

  /// The attachment is an embedded file.
  embedded Boolean @default(false)

  /// The email that contains this attachment.
  email   Email  @relation(fields: [emailId], references: [id])
  emailId String

  /// The path where the attachment is stored.
  storagePath String

  @@unique([emailId, filename])
}

/// Short exerpt of text from an email
model Clip {
  /// Unique identifier for the clip.
  id String @id @default(cuid())

  /// The text content of the clip.
  text String

  /// The email that contains this clip.
  email   Email  @relation(fields: [emailId], references: [id])
  emailId String
}

/// Represents an email address with optional metadata.
model Address {
  /// Unique identifier for the address.
  id String @id @default(cuid())

  /// Optional URL of the avatar associated with the address.
  avatarURL String?

  /// The email address.
  address String @unique

  /// The name associated with the email address.
  name String

  /// Indicates whether the address is known (for recipients).
  known Boolean?

  /// Indicates whether the address is verified (for senders).
  verified Boolean?

  /// The type of address (sender or recipient).
  type AddressType

  /// Bundle all emails sent by this address to a single row
  bundled Boolean @default(false)

  /// Default inbox where emails from this address are stored.
  defaultInbox   Mailbox? @relation("DefaultInbox", fields: [defaultInboxId], references: [id])
  defaultInboxId String?

  /// Emails sent by this address.
  sentEmails Email[] @relation("EmailSender")

  /// Emails received by this address.
  receivedEmails Email[] @relation("EmailRecipient")

  /// Emails where this address is in the CC field.
  ccEmails Email[] @relation("EmailCc")

  /// Last email sent at date. Used for sorting
  lastEmailSentAt DateTime?
}

/// Defines the types of addresses.
enum AddressType {
  /// Represents a sender address.
  SENDER

  /// Represents a recipient address.
  RECIPIENT
}

/// Represents a signature that can be applied to an email.
model Signature {
  /// Unique identifier for the signature.
  id String @id @default(cuid())

  /// The name of the signature.
  name String

  /// The static content parts
  staticParts String[]

  /// The keys of dynamic parts
  dynamicPartsKeys String[]

  /// The account that uses this signature.
  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

/// Represents a label applied to an email.
model Label {
  /// Unique identifier for the label.
  id String @id @default(cuid())

  /// Key for the label (not displayed).
  key String

  /// Display text for the label.
  text String

  /// Color code for the label.
  color String

  /// Emails with this label.
  emails Email[]
}

///:Credentials to authenticate against a server
model ServerAuth {
  /// Unique identifier for the server auth.
  id String @id @default(cuid())

  /// The username used to authenticate with the server.
  username String

  /// Password for authentication (optional for OAuth2).
  password String?

  /// OAuth2 token for authentication (optional for password-based auth).
  token String?

  /// The accounts that use these credentials for sender server.
  senderAccounts Account[] @relation("SenderServerAuth")

  /// The accounts that use these credentials for receiver server.
  receiverAccounts Account[] @relation("ReceiverServerAuth")
}

/// Represents an email server used for sending or receiving emails.
model Server {
  /// Unique identifier for the server.
  id String @id @default(cuid())

  /// Hostname of the server.
  host String

  /// Port number for the server.
  port Int

  /// Indicates whether the connection to the server is secure.
  secure Boolean

  /// The username used to authenticate with the server.
  username String

  /// Password for authentication (optional for OAuth2).
  password String?

  /// OAuth2 token for authentication (optional for password-based auth).
  token String?

  /// The type of server (SMTP, IMAP, etc.).
  type ServerType

  /// Accounts that use this server for sending emails.
  senderAccounts Account[] @relation("SenderServer")

  /// Accounts that use this server for receiving emails.
  receiverAccounts Account[] @relation("ReceiverServer")
}

/// Defines the types of email servers.
enum ServerType {
  /// Represents an SMTP server for sending emails.
  SMTP

  /// Represents an IMAP server for receiving emails.
  IMAP

  /// Represents a Google server (IMAP or custom).
  Google
}
