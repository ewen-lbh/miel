{"type":"data","nodes":[{"type":"data","data":[{"modules":1,"schema":182,"config":183,"items":211},[2,48,82,120,150],{"name":3,"metadata":4,"displayName":3,"rawDocs":5,"shortDescription":6,"renderedDocs":7,"types":8,"queries":13,"mutations":14,"subscriptions":15,"items":16},"emails",{},"# emails\n\nThe email messages themselves\n","The email messages themselves","\u003Chtml>\u003Chead>\u003C/head>\u003Cbody>\n\u003Cp>The email messages themselves\u003C/p>\u003C/body>\u003C/html>",[9,10,11,12],"Email","EmailConnection","Header","Label",[],[],[],[17,27,36,42],{"name":9,"id":9,"type":18,"referencedBy":19,"implementedBy":21,"returnedBy":22,"deprecationReason":24,"moduleName":3,"match":25},"type",[10,20,11],"EmailEdge",[],[23],"email",null,{"static":26},{"matcher":9},{"name":10,"id":10,"type":18,"referencedBy":28,"implementedBy":31,"returnedBy":32,"deprecationReason":24,"connection":33,"moduleName":3,"match":34},[29,12,30],"Address","Mailbox",[],[],{"nodeType":9,"edgeType":20,"connectionType":10},{"static":35},{"matcher":10},{"name":11,"id":11,"type":18,"referencedBy":37,"implementedBy":38,"returnedBy":39,"deprecationReason":24,"moduleName":3,"match":40},[],[],[],{"static":41},{"matcher":11},{"name":12,"id":12,"type":18,"referencedBy":43,"implementedBy":44,"returnedBy":45,"deprecationReason":24,"moduleName":3,"match":46},[],[],[],{"static":47},{"matcher":12},{"name":49,"metadata":50,"displayName":49,"rawDocs":51,"shortDescription":52,"renderedDocs":53,"types":54,"queries":58,"mutations":59,"subscriptions":60,"items":61},"accounts",{},"# accounts\n\nTODO: docs\n","TODO: docs","\u003Chtml>\u003Chead>\u003C/head>\u003Cbody>\n\u003Cp>TODO: docs\u003C/p>\u003C/body>\u003C/html>",[55,56,57],"Account","Server","ServerType",[],[],[],[62,69,76],{"name":55,"id":55,"type":18,"referencedBy":63,"implementedBy":64,"returnedBy":65,"deprecationReason":24,"moduleName":49,"match":66},[30,56],[],[],{"static":67},{"matcher":68},"Account*",{"name":56,"id":56,"type":18,"referencedBy":70,"implementedBy":71,"returnedBy":72,"deprecationReason":24,"moduleName":49,"match":73},[],[],[],{"static":74},{"matcher":75},"Server*",{"name":57,"id":57,"type":18,"referencedBy":77,"implementedBy":78,"returnedBy":79,"deprecationReason":24,"moduleName":49,"match":80},[56],[],[],{"static":81},{"matcher":75},{"name":83,"metadata":84,"displayName":83,"rawDocs":85,"shortDescription":52,"renderedDocs":53,"types":86,"queries":90,"mutations":91,"subscriptions":92,"items":93},"mailboxes",{},"# mailboxes\n\nTODO: docs\n",[30,87,88,89],"MailboxConnection","MailboxEdge","MailboxType",[],[],[],[94,101,108,114],{"name":30,"id":30,"type":18,"referencedBy":95,"implementedBy":96,"returnedBy":97,"deprecationReason":24,"moduleName":83,"match":98},[9],[],[],{"static":99},{"matcher":100},"Mailbox*",{"name":87,"id":87,"type":18,"referencedBy":102,"implementedBy":103,"returnedBy":104,"deprecationReason":24,"connection":105,"moduleName":83,"match":106},[],[],[],{"nodeType":89,"edgeType":88,"connectionType":87},{"static":107},{"matcher":100},{"name":88,"id":88,"type":18,"referencedBy":109,"implementedBy":110,"returnedBy":111,"deprecationReason":24,"moduleName":83,"match":112},[87],[],[],{"static":113},{"matcher":100},{"name":89,"id":89,"type":18,"referencedBy":115,"implementedBy":116,"returnedBy":117,"deprecationReason":24,"moduleName":83,"match":118},[30,87,88],[],[],{"static":119},{"matcher":100},{"name":121,"metadata":122,"displayName":121,"rawDocs":123,"shortDescription":52,"renderedDocs":53,"types":124,"queries":127,"mutations":128,"subscriptions":129,"items":130},"addresses",{},"# addresses\n\nTODO: docs\n",[29,125,126],"AddressType","EmailAddress",[],[],[],[131,138,144],{"name":29,"id":29,"type":18,"referencedBy":132,"implementedBy":133,"returnedBy":134,"deprecationReason":24,"moduleName":121,"match":135},[],[],[],{"static":136},{"matcher":137},"Address*",{"name":125,"id":125,"type":18,"referencedBy":139,"implementedBy":140,"returnedBy":141,"deprecationReason":24,"moduleName":121,"match":142},[],[],[],{"static":143},{"matcher":137},{"name":126,"id":126,"type":18,"referencedBy":145,"implementedBy":146,"returnedBy":147,"deprecationReason":24,"moduleName":121,"match":148},[],[],[],{"static":149},{"matcher":126},{"name":151,"metadata":152,"displayName":151,"rawDocs":153,"shortDescription":52,"renderedDocs":53,"types":154,"queries":158,"mutations":159,"subscriptions":160,"items":161},"global",{},"# global\n\nTODO: docs\n",[155,156,157],"ID","Node","PageInfo",[],[],[],[162,168,176],{"name":155,"id":155,"type":18,"referencedBy":163,"implementedBy":164,"returnedBy":165,"moduleName":151,"match":166},[55,29,9,11,12,30,156,56],[],[],{"static":167},{"matcher":155},{"name":156,"id":156,"type":18,"referencedBy":169,"implementedBy":170,"returnedBy":171,"deprecationReason":24,"moduleName":151,"match":174},[],[55,29,9,11,12,30,56],[172,173],"node","nodes",{"static":175},{"matcher":156},{"name":157,"id":157,"type":18,"referencedBy":177,"implementedBy":178,"returnedBy":179,"deprecationReason":24,"moduleName":151,"match":180},[10,87],[],[],{"static":181},{"matcher":157},"directive @graphinx(module: String) on OBJECT | FIELD_DEFINITION | SCALAR | ENUM | UNION | INTERFACE | INPUT_OBJECT\n\n\"\"\"\nRepresents a user account with associated mailboxes and server configurations.\n\"\"\"\ntype Account implements Node {\n  \"\"\"The email address of the account.\"\"\"\n  address: String\n  id: ID!\n\n  \"\"\"The display name of the account holder.\"\"\"\n  name: String\n}\n\n\"\"\"Represents an email address with optional metadata.\"\"\"\ntype Address implements Node {\n  \"\"\"The email address.\"\"\"\n  address: String\n\n  \"\"\"Optional URL of the avatar associated with the address.\"\"\"\n  avatarURL: URL\n\n  \"\"\"Emails where this address is in the CC field.\"\"\"\n  ccEmails(after: String, before: String, first: Int, last: Int): EmailConnection\n  id: ID!\n\n  \"\"\"Indicates whether the address is known (for recipients).\"\"\"\n  known: Boolean\n\n  \"\"\"The name associated with the email address.\"\"\"\n  name: String\n\n  \"\"\"Emails received by this address.\"\"\"\n  receivedEmails(after: String, before: String, first: Int, last: Int): EmailConnection\n\n  \"\"\"Emails sent by this address.\"\"\"\n  sentEmails(after: String, before: String, first: Int, last: Int): EmailConnection\n\n  \"\"\"Indicates whether the address is verified (for senders).\"\"\"\n  verified: Boolean\n}\n\nenum AddressType {\n  RECIPIENT\n  SENDER\n}\n\n\"\"\"\nA field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.\n\"\"\"\nscalar Color\n\n\"\"\"Represents an email message.\"\"\"\ntype Email implements Node {\n  \"\"\"The HTML body content of the email.\"\"\"\n  html: HTML\n  id: ID!\n\n  \"\"\"The mailbox that contains the email.\"\"\"\n  inbox: Mailbox\n\n  \"\"\"The raw, entire body of the email (all parts).\"\"\"\n  raw: String\n\n  \"\"\"The subject of the email.\"\"\"\n  subject: String\n\n  \"\"\"The text body content of the email.\"\"\"\n  text: String\n\n  \"\"\"Indicates whether the email is trusted (not spam).\"\"\"\n  trusted: Boolean\n}\n\n\"\"\"\nA field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.\n\"\"\"\nscalar EmailAddress\n\ntype EmailConnection {\n  edges: [EmailEdge!]!\n  nodes: [Email!]!\n  pageInfo: PageInfo!\n}\n\ntype EmailEdge {\n  cursor: String!\n  node: Email!\n}\n\nscalar HTML\n\n\"\"\"Represents a key-value header in an email.\"\"\"\ntype Header implements Node {\n  \"\"\"The email that contains this header.\"\"\"\n  email: Email\n  id: ID!\n\n  \"\"\"The header key (e.g., \"Subject\", \"Date\").\"\"\"\n  key: String\n\n  \"\"\"The header value.\"\"\"\n  value: String\n}\n\n\"\"\"Represents a label applied to an email.\"\"\"\ntype Label implements Node {\n  \"\"\"Color code for the label.\"\"\"\n  color: Color\n\n  \"\"\"Emails with this label.\"\"\"\n  emails(after: String, before: String, first: Int, last: Int): EmailConnection\n  id: ID!\n\n  \"\"\"Key for the label (not displayed).\"\"\"\n  key: String\n\n  \"\"\"Display text for the label.\"\"\"\n  text: String\n}\n\n\"\"\"Represents a mailbox, such as an inbox, trash, or sent folder.\"\"\"\ntype Mailbox implements Node {\n  \"\"\"The account this mailbox belongs to.\"\"\"\n  account: Account\n\n  \"\"\"List of emails stored in this mailbox.\"\"\"\n  emails(after: String, before: String, first: Int, last: Int): EmailConnection\n  id: ID!\n\n  \"\"\"Indicates whether this is the main mailbox.\"\"\"\n  main: Boolean\n\n  \"\"\"Optional name for the mailbox.\"\"\"\n  name: String\n\n  \"\"\"The type of mailbox (e.g., Inbox, Trashbox, Sentbox).\"\"\"\n  type: MailboxType\n\n  \"\"\"Accounts that use this mailbox as the drafts mailbox.\"\"\"\n  usedAsDraftsboxOn: [Account!]\n\n  \"\"\"Accounts that use this mailbox as the main mailbox.\"\"\"\n  usedAsMainboxOn: [Account!]\n\n  \"\"\"Accounts that use this mailbox as the sent mailbox.\"\"\"\n  usedAsSentboxOn: [Account!]\n\n  \"\"\"Accounts that use this mailbox as the trash mailbox.\"\"\"\n  usedAsTrashboxOn: [Account!]\n}\n\ntype MailboxConnection {\n  edges: [MailboxEdge!]!\n  nodes: [MailboxType!]!\n  pageInfo: PageInfo!\n}\n\ntype MailboxEdge {\n  cursor: String!\n  node: MailboxType!\n}\n\nenum MailboxType {\n  DRAFTS\n  INBOX\n  SENTBOX\n  TRASHBOX\n}\n\ntype Mutation\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}\n\ntype Query {\n  \"\"\"Find a mail by id\"\"\"\n  email(id: ID!): Email\n  node(id: ID!): Node\n  nodes(ids: [ID!]!): [Node]!\n}\n\n\"\"\"Represents an email server used for sending or receiving emails.\"\"\"\ntype Server implements Node {\n  \"\"\"Hostname of the server.\"\"\"\n  host: String\n  id: ID!\n\n  \"\"\"Password for authentication (optional for OAuth2).\"\"\"\n  password: String\n\n  \"\"\"Port number for the server.\"\"\"\n  port: Int\n\n  \"\"\"Accounts that use this server for receiving emails.\"\"\"\n  receiverAccounts: [Account!]\n\n  \"\"\"Indicates whether the connection to the server is secure.\"\"\"\n  secure: Boolean\n\n  \"\"\"Accounts that use this server for sending emails.\"\"\"\n  senderAccounts: [Account!]\n\n  \"\"\"OAuth2 token for authentication (optional for password-based auth).\"\"\"\n  token: String\n\n  \"\"\"The type of server (SMTP, IMAP, etc.).\"\"\"\n  type: ServerType\n\n  \"\"\"The username used to authenticate with the server.\"\"\"\n  username: String\n}\n\nenum ServerType {\n  Google\n  IMAP\n  SMTP\n}\n\ntype Subscription\n\n\"\"\"\nUne adresse internet (URL). Les protocoles autorisés sont: http:, https:, mailto:, tel:\n\"\"\"\nscalar URL",{"template":184,"schema":185,"branding":187,"types":191,"description":202,"modules":203,"environment":209,"_dir":210},"graphinx/templates/default#v0.12.2",{"static":186},"../fructose/schema.gql",{"name":188,"logo":189},"Miel API",{"dark":190,"light":190},"https://raw.githubusercontent.com/graphinx/graphinx/refs/heads/main/logo.png",{"relay":192,"errors":196,"input":200},{"connection":193,"nodes":194,"edges":195},"^[A-Z]\\w+Connection$","edges.node","edges",{"result":197,"success":198,"datafield":199},"^[A-Z]\\w+Result$","^[A-Z]\\w+Success$","data",{"type":201},"Mutation[FieldName]Input","@miel/invertase\n===============\n\nGraphQL server implemented in Pothos that exposes data from the database (defined at @miel/ruche).\n\nAlso provides subscriptions to listen to real-time updates from @miel/nectar's Redis pub/sub server.\n",{"docs":204,"icons":205,"order":206,"fallback":151,"filesystem":207,"mapping":208},"docs/[module].md","docs/[module].svg",[3,49,83,121,151],[],{"ID":151,"Node":151,"PageInfo":151,"Error":151,"ErrorInterface":151,"*Error":151,"Mailbox*":83,"Address*":121,"EmailAddress":121,"Account*":49,"Server*":49,"Email":3,"EmailConnection":3,"Header":3,"Label":3},{},".",[212,218,225,231,237,243,249,255,261,268,274,280,286,292,298,304,310],{"name":9,"id":9,"type":18,"referencedBy":213,"implementedBy":214,"returnedBy":215,"deprecationReason":24,"moduleName":3,"match":216},[10,20,11],[],[23],{"static":217},{"matcher":9},{"name":10,"id":10,"type":18,"referencedBy":219,"implementedBy":220,"returnedBy":221,"deprecationReason":24,"connection":222,"moduleName":3,"match":223},[29,12,30],[],[],{"nodeType":9,"edgeType":20,"connectionType":10},{"static":224},{"matcher":10},{"name":11,"id":11,"type":18,"referencedBy":226,"implementedBy":227,"returnedBy":228,"deprecationReason":24,"moduleName":3,"match":229},[],[],[],{"static":230},{"matcher":11},{"name":12,"id":12,"type":18,"referencedBy":232,"implementedBy":233,"returnedBy":234,"deprecationReason":24,"moduleName":3,"match":235},[],[],[],{"static":236},{"matcher":12},{"name":55,"id":55,"type":18,"referencedBy":238,"implementedBy":239,"returnedBy":240,"deprecationReason":24,"moduleName":49,"match":241},[30,56],[],[],{"static":242},{"matcher":68},{"name":56,"id":56,"type":18,"referencedBy":244,"implementedBy":245,"returnedBy":246,"deprecationReason":24,"moduleName":49,"match":247},[],[],[],{"static":248},{"matcher":75},{"name":57,"id":57,"type":18,"referencedBy":250,"implementedBy":251,"returnedBy":252,"deprecationReason":24,"moduleName":49,"match":253},[56],[],[],{"static":254},{"matcher":75},{"name":30,"id":30,"type":18,"referencedBy":256,"implementedBy":257,"returnedBy":258,"deprecationReason":24,"moduleName":83,"match":259},[9],[],[],{"static":260},{"matcher":100},{"name":87,"id":87,"type":18,"referencedBy":262,"implementedBy":263,"returnedBy":264,"deprecationReason":24,"connection":265,"moduleName":83,"match":266},[],[],[],{"nodeType":89,"edgeType":88,"connectionType":87},{"static":267},{"matcher":100},{"name":88,"id":88,"type":18,"referencedBy":269,"implementedBy":270,"returnedBy":271,"deprecationReason":24,"moduleName":83,"match":272},[87],[],[],{"static":273},{"matcher":100},{"name":89,"id":89,"type":18,"referencedBy":275,"implementedBy":276,"returnedBy":277,"deprecationReason":24,"moduleName":83,"match":278},[30,87,88],[],[],{"static":279},{"matcher":100},{"name":29,"id":29,"type":18,"referencedBy":281,"implementedBy":282,"returnedBy":283,"deprecationReason":24,"moduleName":121,"match":284},[],[],[],{"static":285},{"matcher":137},{"name":125,"id":125,"type":18,"referencedBy":287,"implementedBy":288,"returnedBy":289,"deprecationReason":24,"moduleName":121,"match":290},[],[],[],{"static":291},{"matcher":137},{"name":126,"id":126,"type":18,"referencedBy":293,"implementedBy":294,"returnedBy":295,"deprecationReason":24,"moduleName":121,"match":296},[],[],[],{"static":297},{"matcher":126},{"name":155,"id":155,"type":18,"referencedBy":299,"implementedBy":300,"returnedBy":301,"moduleName":151,"match":302},[55,29,9,11,12,30,156,56],[],[],{"static":303},{"matcher":155},{"name":156,"id":156,"type":18,"referencedBy":305,"implementedBy":306,"returnedBy":307,"deprecationReason":24,"moduleName":151,"match":308},[],[55,29,9,11,12,30,56],[172,173],{"static":309},{"matcher":156},{"name":157,"id":157,"type":18,"referencedBy":311,"implementedBy":312,"returnedBy":313,"deprecationReason":24,"moduleName":151,"match":314},[10,87],[],[],{"static":315},{"matcher":157}],"uses":{},"slash":"always"},{"type":"data","data":[{"schema":1,"modules":2},"directive @graphinx(module: String) on OBJECT | FIELD_DEFINITION | SCALAR | ENUM | UNION | INTERFACE | INPUT_OBJECT\n\n\"\"\"\nRepresents a user account with associated mailboxes and server configurations.\n\"\"\"\ntype Account implements Node {\n  \"\"\"The email address of the account.\"\"\"\n  address: String\n  id: ID!\n\n  \"\"\"The display name of the account holder.\"\"\"\n  name: String\n}\n\n\"\"\"Represents an email address with optional metadata.\"\"\"\ntype Address implements Node {\n  \"\"\"The email address.\"\"\"\n  address: String\n\n  \"\"\"Optional URL of the avatar associated with the address.\"\"\"\n  avatarURL: URL\n\n  \"\"\"Emails where this address is in the CC field.\"\"\"\n  ccEmails(after: String, before: String, first: Int, last: Int): EmailConnection\n  id: ID!\n\n  \"\"\"Indicates whether the address is known (for recipients).\"\"\"\n  known: Boolean\n\n  \"\"\"The name associated with the email address.\"\"\"\n  name: String\n\n  \"\"\"Emails received by this address.\"\"\"\n  receivedEmails(after: String, before: String, first: Int, last: Int): EmailConnection\n\n  \"\"\"Emails sent by this address.\"\"\"\n  sentEmails(after: String, before: String, first: Int, last: Int): EmailConnection\n\n  \"\"\"Indicates whether the address is verified (for senders).\"\"\"\n  verified: Boolean\n}\n\nenum AddressType {\n  RECIPIENT\n  SENDER\n}\n\n\"\"\"\nA field whose value is a hex color code: https://en.wikipedia.org/wiki/Web_colors.\n\"\"\"\nscalar Color\n\n\"\"\"Represents an email message.\"\"\"\ntype Email implements Node {\n  \"\"\"The HTML body content of the email.\"\"\"\n  html: HTML\n  id: ID!\n\n  \"\"\"The mailbox that contains the email.\"\"\"\n  inbox: Mailbox\n\n  \"\"\"The raw, entire body of the email (all parts).\"\"\"\n  raw: String\n\n  \"\"\"The subject of the email.\"\"\"\n  subject: String\n\n  \"\"\"The text body content of the email.\"\"\"\n  text: String\n\n  \"\"\"Indicates whether the email is trusted (not spam).\"\"\"\n  trusted: Boolean\n}\n\n\"\"\"\nA field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.\n\"\"\"\nscalar EmailAddress\n\ntype EmailConnection {\n  edges: [EmailEdge!]!\n  nodes: [Email!]!\n  pageInfo: PageInfo!\n}\n\ntype EmailEdge {\n  cursor: String!\n  node: Email!\n}\n\nscalar HTML\n\n\"\"\"Represents a key-value header in an email.\"\"\"\ntype Header implements Node {\n  \"\"\"The email that contains this header.\"\"\"\n  email: Email\n  id: ID!\n\n  \"\"\"The header key (e.g., \"Subject\", \"Date\").\"\"\"\n  key: String\n\n  \"\"\"The header value.\"\"\"\n  value: String\n}\n\n\"\"\"Represents a label applied to an email.\"\"\"\ntype Label implements Node {\n  \"\"\"Color code for the label.\"\"\"\n  color: Color\n\n  \"\"\"Emails with this label.\"\"\"\n  emails(after: String, before: String, first: Int, last: Int): EmailConnection\n  id: ID!\n\n  \"\"\"Key for the label (not displayed).\"\"\"\n  key: String\n\n  \"\"\"Display text for the label.\"\"\"\n  text: String\n}\n\n\"\"\"Represents a mailbox, such as an inbox, trash, or sent folder.\"\"\"\ntype Mailbox implements Node {\n  \"\"\"The account this mailbox belongs to.\"\"\"\n  account: Account\n\n  \"\"\"List of emails stored in this mailbox.\"\"\"\n  emails(after: String, before: String, first: Int, last: Int): EmailConnection\n  id: ID!\n\n  \"\"\"Indicates whether this is the main mailbox.\"\"\"\n  main: Boolean\n\n  \"\"\"Optional name for the mailbox.\"\"\"\n  name: String\n\n  \"\"\"The type of mailbox (e.g., Inbox, Trashbox, Sentbox).\"\"\"\n  type: MailboxType\n\n  \"\"\"Accounts that use this mailbox as the drafts mailbox.\"\"\"\n  usedAsDraftsboxOn: [Account!]\n\n  \"\"\"Accounts that use this mailbox as the main mailbox.\"\"\"\n  usedAsMainboxOn: [Account!]\n\n  \"\"\"Accounts that use this mailbox as the sent mailbox.\"\"\"\n  usedAsSentboxOn: [Account!]\n\n  \"\"\"Accounts that use this mailbox as the trash mailbox.\"\"\"\n  usedAsTrashboxOn: [Account!]\n}\n\ntype MailboxConnection {\n  edges: [MailboxEdge!]!\n  nodes: [MailboxType!]!\n  pageInfo: PageInfo!\n}\n\ntype MailboxEdge {\n  cursor: String!\n  node: MailboxType!\n}\n\nenum MailboxType {\n  DRAFTS\n  INBOX\n  SENTBOX\n  TRASHBOX\n}\n\ntype Mutation\n\ninterface Node {\n  id: ID!\n}\n\ntype PageInfo {\n  endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}\n\ntype Query {\n  \"\"\"Find a mail by id\"\"\"\n  email(id: ID!): Email\n  node(id: ID!): Node\n  nodes(ids: [ID!]!): [Node]!\n}\n\n\"\"\"Represents an email server used for sending or receiving emails.\"\"\"\ntype Server implements Node {\n  \"\"\"Hostname of the server.\"\"\"\n  host: String\n  id: ID!\n\n  \"\"\"Password for authentication (optional for OAuth2).\"\"\"\n  password: String\n\n  \"\"\"Port number for the server.\"\"\"\n  port: Int\n\n  \"\"\"Accounts that use this server for receiving emails.\"\"\"\n  receiverAccounts: [Account!]\n\n  \"\"\"Indicates whether the connection to the server is secure.\"\"\"\n  secure: Boolean\n\n  \"\"\"Accounts that use this server for sending emails.\"\"\"\n  senderAccounts: [Account!]\n\n  \"\"\"OAuth2 token for authentication (optional for password-based auth).\"\"\"\n  token: String\n\n  \"\"\"The type of server (SMTP, IMAP, etc.).\"\"\"\n  type: ServerType\n\n  \"\"\"The username used to authenticate with the server.\"\"\"\n  username: String\n}\n\nenum ServerType {\n  Google\n  IMAP\n  SMTP\n}\n\ntype Subscription\n\n\"\"\"\nUne adresse internet (URL). Les protocoles autorisés sont: http:, https:, mailto:, tel:\n\"\"\"\nscalar URL",[3],{"name":4,"metadata":5,"displayName":4,"rawDocs":6,"shortDescription":7,"renderedDocs":8,"types":9,"queries":14,"mutations":15,"subscriptions":16,"items":17},"mailboxes",{},"# mailboxes\n\nTODO: docs\n","TODO: docs","\u003Chtml>\u003Chead>\u003C/head>\u003Cbody>\n\u003Cp>TODO: docs\u003C/p>\u003C/body>\u003C/html>",[10,11,12,13],"Mailbox","MailboxConnection","MailboxEdge","MailboxType",[],[],[],[18,28,35,41],{"name":10,"id":10,"type":19,"referencedBy":20,"implementedBy":22,"returnedBy":23,"deprecationReason":24,"moduleName":4,"match":25},"type",[21],"Email",[],[],null,{"static":26},{"matcher":27},"Mailbox*",{"name":11,"id":11,"type":19,"referencedBy":29,"implementedBy":30,"returnedBy":31,"deprecationReason":24,"connection":32,"moduleName":4,"match":33},[],[],[],{"nodeType":13,"edgeType":12,"connectionType":11},{"static":34},{"matcher":27},{"name":12,"id":12,"type":19,"referencedBy":36,"implementedBy":37,"returnedBy":38,"deprecationReason":24,"moduleName":4,"match":39},[11],[],[],{"static":40},{"matcher":27},{"name":13,"id":13,"type":19,"referencedBy":42,"implementedBy":43,"returnedBy":44,"deprecationReason":24,"moduleName":4,"match":45},[10,11,12],[],[],{"static":46},{"matcher":27}],"uses":{"params":["module"]}}]}
